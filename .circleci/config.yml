# Author @mvxt
version: 2.1

#####################
# Common Definitions
#####################

# Orb declarations
orbs:
  heroku: circleci/heroku@1.2.6

# Simple YAML anchors
aliases:
  - &project_dir "~/project"

commands:
  dependencies:
    description: "Download dependencies and setup global packages"
    parameters:
      shell:
        type: string
        default: "/bin/bash --login -eo pipefail"
      pub-cache:
        type: string
        default: "~/.pub-cache"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1.4-dependencies-{{ arch }}-{{ checksum "pubspec.lock" }}
            - v1.4-dependencies-{{ arch }}-
      - run:
          name: Download deps
          shell: << parameters.shell >>
          command: pub get
      - run:
          name: Get junitreporter
          shell: << parameters.shell >>
          command: pub global activate junitreport
      - save_cache:
          key: v1.4-dependencies-{{ arch }}-{{ checksum "pubspec.lock" }}
          paths:
            - .dart_tool
            - << parameters.pub-cache >>

###### ################
# Workflow definition
###### ################
workflows:
  version: 2.1
  test-and-build:
    jobs:
      - test
      - build-api-docker:
          context: dart-docker
          requires:
            - test
      - build-web-docker:
          context: dart-docker
          requires:
            - test

      - deploy-web:
          requires:
            - build-web-docker
          context:
            - heroku
            - dart-docker
      - deploy-api:
          requires:
            - build-api-docker
          context:
            - heroku
            - dart-docker

##################
# Job Definitions
##################
jobs:
  test:
    docker:
      - image: google/dart:2.10.4
    steps:
      - dependencies:
          shell: "/bin/bash -eo pipefail"
      - run:
          name: Make folder for test results
          command: mkdir -p test-results/dart-tests
#      - run:
#          name: Run tests
#          command: pub run test --reporter json | tojunit --output test-results/dart-tests/circleci_dart_demo_test-report.xml
#      - store_test_results:
#          path: test-results
  deploy-web:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - heroku/check-authentication
      - setup_remote_docker
      - run:
          name: Login to Heroku image
          command: heroku container:login
      - run:
          name: Push docker image to Heroku
          command: |
            docker pull alive/dart-demo-web
            docker tag alive/dart-demo-web registry.heroku.com/dart-web-1/web
            docker push registry.heroku.com/dart-web-1/web
      - run:
          name: Release
          command: heroku container:release -a dart-web-1
  deploy-api:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - heroku/check-authentication
      - setup_remote_docker
      - run:
          name: Login to Heroku image
          command: heroku container:login
      - run:
          name: Push docker image to Heroku
          command: |
            docker pull alive/dart-demo-api
            docker tag alive/dart-demo-api registry.heroku.com/dart-api-1/web
            docker push registry.heroku.com/dart-api-1/web
      - run:
          name: Release
          command: heroku container:release -a dart-api-1
  build-api-docker:
    docker:
      - image: cimg/base:2020.08
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build & tag Docker image
          command: docker build -f containers/api/Dockerfile -t alive/dart-demo-api -t alive/dart-demo-api:${CIRCLE_SHA1} .
      - run:
          name: Login to DockerHub and push
          command: |
           echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
           docker push alive/dart-demo-api
           docker push alive/dart-demo-api:${CIRCLE_SHA1}

  build-web-docker:
    docker:
      - image: cimg/base:2020.08
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build & tag Docker image
          command: docker build -f containers/web/Dockerfile -t alive/dart-demo-web -t alive/dart-demo-web:${CIRCLE_SHA1} .
      - run:
          name: Login to DockerHub and push
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push alive/dart-demo-web
            docker push alive/dart-demo-web:${CIRCLE_SHA1}